Python 3.10.9 (tags/v3.10.9:1dd9be6, Dec  6 2022, 20:01:21) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
import pandas
import pandas as pd
pd
<module 'pandas' from 'C:\\Users\\211b365\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\__init__.py'>
df= pd.DataFrame([1,2,3,4,5])
df
   0
0  1
1  2
2  3
3  4
4  5
type(df)
<class 'pandas.core.frame.DataFrame'>
df = pd.DataFrame({"er":[1,2,3,4,5,6,7,8,9,10]})
df
   er
0   1
1   2
2   3
3   4
4   5
5   6
6   7
7   8
8   9
9  10
df = pd.DataFrame({"er":[1,2,3,4,5,6,7,8,9,10],"physics":[0,10,20,30,40,50,60,70,80,90]})
df
   er  physics
0   1        0
1   2       10
2   3       20
3   4       30
4   5       40
5   6       50
6   7       60
7   8       70
8   9       80
9  10       90
df = pd.DataFrame({"er":[1,2,3,4,5,6,7,8,9,10],"physics":[0,10,20,30,40,50,60,70,80,90],"chemistry":[90,80,70,60,50,40,30,20,10,0],"maths":[5,10,15,20,25,30,35,40,45,50]})
df
   er  physics  chemistry  maths
0   1        0         90      5
1   2       10         80     10
2   3       20         70     15
3   4       30         60     20
4   5       40         50     25
5   6       50         40     30
6   7       60         30     35
7   8       70         20     40
8   9       80         10     45
9  10       90          0     50
d1 = {'a':[1,2,3,4,5],'b':[5,4,3,2,1]}
d1
{'a': [1, 2, 3, 4, 5], 'b': [5, 4, 3, 2, 1]}
df_dict= pd.DataFrame(d1)
df_dict
   a  b
0  1  5
1  2  4
2  3  3
3  4  2
4  5  1
s1 = df_dict['a']
s1
0    1
1    2
2    3
3    4
4    5
Name: a, dtype: int64
type(s1)
<class 'pandas.core.series.Series'>
type(df_dict)
<class 'pandas.core.frame.DataFrame'>
df_dict.shape
(5, 2)
df.shape
(10, 4)
df_dict.columns
Index(['a', 'b'], dtype='object')
df.columns
Index(['er', 'physics', 'chemistry', 'maths'], dtype='object')
len(df.columns)
4
df[1]
Traceback (most recent call last):
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexes\base.py", line 3802, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 138, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 165, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 5745, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 5753, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 1

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "<pyshell#26>", line 1, in <module>
    df[1]
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\frame.py", line 3807, in __getitem__
    indexer = self.columns.get_loc(key)
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexes\base.py", line 3804, in get_loc
    raise KeyError(key) from err
KeyError: 1
df[1:2]
   er  physics  chemistry  maths
1   2       10         80     10
s1.info()
<class 'pandas.core.series.Series'>
RangeIndex: 5 entries, 0 to 4
Series name: a
Non-Null Count  Dtype
--------------  -----
5 non-null      int64
dtypes: int64(1)
memory usage: 168.0 bytes
df.describe()
             er    physics  chemistry      maths
count  10.00000  10.000000  10.000000  10.000000
mean    5.50000  45.000000  45.000000  27.500000
std     3.02765  30.276504  30.276504  15.138252
min     1.00000   0.000000   0.000000   5.000000
25%     3.25000  22.500000  22.500000  16.250000
50%     5.50000  45.000000  45.000000  27.500000
75%     7.75000  67.500000  67.500000  38.750000
max    10.00000  90.000000  90.000000  50.000000
s1.describe()
count    5.000000
mean     3.000000
std      1.581139
min      1.000000
25%      2.000000
50%      3.000000
75%      4.000000
max      5.000000
Name: a, dtype: float64
df.loc([:,'physics'])
SyntaxError: invalid syntax
df.loc[:,'physics']
0     0
1    10
2    20
3    30
4    40
5    50
6    60
7    70
8    80
9    90
Name: physics, dtype: int64
df.loc[:,['physics','maths']]
   physics  maths
0        0      5
1       10     10
2       20     15
3       30     20
4       40     25
5       50     30
6       60     35
7       70     40
8       80     45
9       90     50
df.loc[0:2,['physics','maths']]
   physics  maths
0        0      5
1       10     10
2       20     15
df.loc[0:2,[0,1]]
Traceback (most recent call last):
  File "<pyshell#35>", line 1, in <module>
    df.loc[0:2,[0,1]]
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexing.py", line 1067, in __getitem__
    return self._getitem_tuple(key)
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexing.py", line 1256, in _getitem_tuple
    return self._getitem_tuple_same_dim(tup)
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexing.py", line 924, in _getitem_tuple_same_dim
    retval = getattr(retval, self.name)._getitem_axis(key, axis=i)
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexing.py", line 1301, in _getitem_axis
    return self._getitem_iterable(key, axis=axis)
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexing.py", line 1239, in _getitem_iterable
    keyarr, indexer = self._get_listlike_indexer(key, axis)
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexing.py", line 1432, in _get_listlike_indexer
    keyarr, indexer = ax._get_indexer_strict(key, axis_name)
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexes\base.py", line 6070, in _get_indexer_strict
    self._raise_if_missing(keyarr, indexer, axis_name)
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\indexes\base.py", line 6130, in _raise_if_missing
    raise KeyError(f"None of [{key}] are in the [{axis_name}]")
KeyError: "None of [Int64Index([0, 1], dtype='int64')] are in the [columns]"
df.iloc[0:2,[0,1]]
   er  physics
0   1        0
1   2       10
df1 = df.set_index('er')
df1
    physics  chemistry  maths
er                           
1         0         90      5
2        10         80     10
3        20         70     15
4        30         60     20
5        40         50     25
6        50         40     30
7        60         30     35
8        70         20     40
9        80         10     45
10       90          0     50
df1[0:1]
    physics  chemistry  maths
er                           
1         0         90      5
df1.iloc[0:1]
    physics  chemistry  maths
er                           
1         0         90      5
df1['physics']
er
1      0
2     10
3     20
4     30
5     40
6     50
7     60
8     70
9     80
10    90
Name: physics, dtype: int64
df1[df1['physics']>70]
    physics  chemistry  maths
er                           
9        80         10     45
10       90          0     50
df1['physics'].max()
90
df1['physics'].min()
0
df1['physics'].std()
30.276503540974915
df1[df1['physics']>70 and df1['maths']>70 ]
Traceback (most recent call last):
  File "<pyshell#46>", line 1, in <module>
    df1[df1['physics']>70 and df1['maths']>70 ]
  File "C:\Users\211b365\AppData\Local\Programs\Python\Python310\lib\site-packages\pandas\core\generic.py", line 1527, in __nonzero__
    raise ValueError(
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
df1[(df1['physics']>70) & (df1['maths']>70)]
Empty DataFrame
Columns: [physics, chemistry, maths]
Index: []
df1
    physics  chemistry  maths
er                           
1         0         90      5
2        10         80     10
3        20         70     15
4        30         60     20
5        40         50     25
6        50         40     30
7        60         30     35
8        70         20     40
9        80         10     45
10       90          0     50
df1[(df1['physics']>50) & (df1['maths']>50)]
Empty DataFrame
Columns: [physics, chemistry, maths]
Index: []
df1[(df1['physics']>30) & (df1['maths']>30)]
    physics  chemistry  maths
er                           
7        60         30     35
8        70         20     40
9        80         10     45
10       90          0     50
